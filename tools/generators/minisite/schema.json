{
  "$schema": "http://json-schema.org/schema",
  "cli": "nx",
  "$id": "GFWMiniSite",
  "title": "Create a GFW minisite for Nx",
  "examples": [
    {
      "command": "g app minisite --directory=myorg",
      "description": "Generate apps/myorg/myminisite and apps/myorg/myminisite-e2e"
    }
  ],
  "type": "object",
  "properties": {
    "name": {
      "description": "The name of the minisite.",
      "type": "string",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the minisite?",
      "pattern": "^[a-zA-Z].*$"
    },
    "display_name": {
      "description": "The display name of the minisite.",
      "type": "string",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What display name would you like to use for the minisite?",
      "pattern": "^[a-zA-Z].*$"
    },
    "directory": {
      "description": "The directory of the new application.",
      "type": "string",
      "alias": "d"
    },
    "style": {
      "description": "The file extension to be used for style files.",
      "type": "string",
      "default": "css",
      "alias": "s"
    },
    "server": {
      "description": "The server script path to be used with next.",
      "type": "string"
    },
    "skipFormat": {
      "description": "Skip formatting files",
      "type": "boolean",
      "default": false
    },
    "skipWorkspaceJson": {
      "description": "Skip updating workspace.json with default options based on values provided to this app (e.g. babel, style)",
      "type": "boolean",
      "default": false
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["jest", "none"],
      "description": "Test runner to use for unit tests",
      "default": "jest"
    },
    "e2eTestRunner": {
      "type": "string",
      "enum": ["cypress", "none"],
      "description": "Test runner to use for end to end (e2e) tests",
      "default": "none"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the application (used for linting)",
      "alias": "t"
    },
    "js": {
      "type": "boolean",
      "description": "Generate JavaScript files rather than TypeScript files.",
      "default": false
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint \"parserOptions.project\" option. We do not do this by default for lint performance reasons.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into <projectRoot>/project.json rather than including it inside workspace.json",
      "type": "boolean"
    },
    "swc": {
      "description": "Enable the Rust-based compiler SWC to compile JS/TS files.",
      "type": "boolean",
      "default": true
    }
  },
  "required": []
}

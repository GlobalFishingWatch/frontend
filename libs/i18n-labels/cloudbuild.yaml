steps:
  - name: 'gcr.io/$PROJECT_ID/restore_cache'
    id: restore_cache
    waitFor: ['-']
    args:
      - '--bucket=gs://frontend-cache-dependencies'
      - '--key=yarn-$( checksum yarn.lock )'

  - id: 'install-yarn'
    waitFor: ['restore_cache']
    name: gcr.io/cloud-builders/yarn
    entrypoint: bash
    args:
      - '-c'
      # if dependencies cache is not found then install all deps
      - |
        if [ ! -d "node_modules" ]; then
          yarn install --frozen-lockfile
        fi

  - id: 'save_cache'
    waitFor: ['install-yarn']
    name: 'gcr.io/$PROJECT_ID/save_cache'
    args:
      - '--bucket=gs://frontend-cache-dependencies'
      - '--key=yarn-$( checksum yarn.lock )'
      - '--path=./node_modules'
      - '--no-clobber'
  - id: 'deploy-i18n-labels'
    waitFor: ['install-yarn']
    name: gcr.io/cloud-builders/yarn
    entrypoint: yarn
    args: ['nx', 'deploy', 'i18n-labels']
    env:
      - 'NODE_AUTH_TOKEN=$$NPM_TOKEN'
      - 'NX_CLOUD_AUTH_TOKEN=$_NX_CLOUD_AUTH_TOKEN'

availableSecrets:
  secretManager:
    - versionName: projects/world-fishing-827/secrets/NPM_TOKEN/versions/latest
      env: 'NPM_TOKEN'

timeout: 1800s

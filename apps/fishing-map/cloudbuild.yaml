steps:
  - name: 'gcr.io/$PROJECT_ID/restore_cache'
    id: restore_cache
    waitFor: ['-']
    script: |
      #!/usr/bin/env bash
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock ) \
        --key_fallback=yarn3-cache

  - id: 'generate-cypress-lock'
    waitFor: ['restore_cache']
    name: node:18
    script: |
      if [ -d "node_modules" ]; then
        yarn info cypress version > cypress.lock
      fi

  - name: 'gcr.io/$PROJECT_ID/restore_cache'
    id: restore_cypress_cache
    waitFor: ['generate-cypress-lock']
    script: |
      #!/usr/bin/env bash
      if [ -d "node_modules" ]; then
        restore_cache \
          --bucket=gs://frontend-cache-dependencies \
          --key=cypress-$( checksum cypress.lock ) \
          --key_fallback=cypress-cache
      fi

  - id: 'install-yarn'
    waitFor: ['restore_cache']
    name: node:18
    script: |
      if [ ! -d "node_modules" ]; then
        apk add git
        yarn set version 3.6.1
        yarn -v
        CYPRESS_CACHE_FOLDER=.cypress-cache yarn install --immutable
        yarn info cypress version > cypress.lock
      fi

  - id: 'save_cache'
    waitFor: ['install-yarn']
    name: 'gcr.io/$PROJECT_ID/restore_cache'
    env:
      - 'BRANCH_NAME=$BRANCH_NAME'
    script: |
      #!/usr/bin/env bash
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock ) \
        --path=./node_modules \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=cypress-$( checksum cypress.lock ) \
        --path=.cypress-cache \
        --no-clobber
      if [ -d ".yarn/cache" ]; then
        if [ $BRANCH_NAME == "dev" ]; then
          save_cache \
            --bucket=gs://frontend-cache-dependencies \
            --key=yarn3-cache \
            --path=./.yarn/cache
        fi
      fi

  - id: 'build-app'
    waitFor: ['install-yarn']
    name: node:18
    entrypoint: yarn
    args: ['nx', 'build', 'fishing-map', '--parallel']
    env:
      - 'NX_BRANCH=$_NX_BRANCH'
      - 'NX_CLOUD_AUTH_TOKEN=$_NX_CLOUD_AUTH_TOKEN'
      - 'NEXT_PUBLIC_API_GATEWAY=$_NEXT_PUBLIC_API_GATEWAY'
      - 'NEXT_PUBLIC_API_VERSION=$_NEXT_PUBLIC_API_VERSION'
      - 'NEXT_PUBLIC_CARRIER_PORTAL_URL=$_NEXT_PUBLIC_CARRIER_PORTAL_URL'
      - 'NEXT_PUBLIC_FEEDBACK_SPREADSHEET_ID=$_NEXT_PUBLIC_FEEDBACK_SPREADSHEET_ID'
      - 'NEXT_PUBLIC_GOOGLE_MEASUREMENT_ID=$_NEXT_PUBLIC_GOOGLE_MEASUREMENT_ID'
      - 'NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID=$_NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID'
      - 'NEXT_PUBLIC_LATEST_CARRIER_DATASET_ID=$_NEXT_PUBLIC_LATEST_CARRIER_DATASET_ID'
      - 'NEXT_PUBLIC_SPREADSHEET_CLIENT_EMAIL=$_NEXT_PUBLIC_SPREADSHEET_CLIENT_EMAIL'
      - 'NEXT_PUBLIC_USE_LOCAL_DATASETS=$_NEXT_PUBLIC_USE_LOCAL_DATASETS'
      - 'NEXT_PUBLIC_USE_LOCAL_DATAVIEWS=$_NEXT_PUBLIC_USE_LOCAL_DATAVIEWS'
      - 'NEXT_PUBLIC_SPREADSHEET_PRIVATE_KEY=$_NEXT_PUBLIC_SPREADSHEET_PRIVATE_KEY'
      - 'NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
      - 'NEXT_PUBLIC_REPORT_DAYS_LIMIT=$_NEXT_PUBLIC_REPORT_DAYS_LIMIT'
      - 'NEXT_PUBLIC_WORKSPACES_SPREADSHEET_ID=$_NEXT_PUBLIC_WORKSPACES_SPREADSHEET_ID'

  - name: 'gcr.io/kaniko-project/executor:v1.6.0'
    id: 'build-image'
    waitFor: ['build-app']
    args:
      [
        '--destination=gcr.io/world-fishing-827/github.com/globalfishingwatch/fishing-map:$COMMIT_SHA',
        '--cache=true',
        '--build-arg',
        'APP_NAME=fishing-map',
        '--target',
        'production',
        '-f',
        './apps/fishing-map/Dockerfile',
        '-c',
        './dist/apps/fishing-map',
      ]

  # Deploy to the appropriate environment
  - name: 'gcr.io/cloud-builders/gcloud'
    waitFor: ['build-image']
    id: 'deploy-cloud-run'
    entrypoint: 'bash'
    env:
      - '_RUN_SERVICE_NAME=$_RUN_SERVICE_NAME'
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        branch_service_name=`echo fishing-map-$BRANCH_NAME | sed -r 's,[/\.],-,g' | awk '{print substr(tolower($0),0,62)}'`
        service_name=${_RUN_SERVICE_NAME:-${branch_service_name}}
        gcloud beta run deploy \
          $service_name \
          --project \
          $_RUN_PROJECT \
          --image \
          gcr.io/world-fishing-827/github.com/globalfishingwatch/fishing-map:$COMMIT_SHA \
          --region \
          $_RUN_REGION \
          --platform managed \
          --set-env-vars \
          BASIC_AUTH=$_BASIC_AUTH \
          --set-env-vars \
          BASIC_AUTH_USER=$_BASIC_AUTH_USER \
          --set-env-vars \
          BASIC_AUTH_PASS=$_BASIC_AUTH_PASS \
          --allow-unauthenticated
        workspace_env=${_NEXT_PUBLIC_WORKSPACE_ENV:-'development'}
        if [ $workspace_env = 'development' ]; then
          app_url='https://globalfishingwatch.org/map'
        else
          gcloud run services describe $service_name \
           --project $_RUN_PROJECT \
           --platform managed \
           --region $_RUN_REGION \
           --format 'value(status.url)' > app_url
        fi

  - id: 'i18n-labels publish stable'
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['deploy-cloud-run']
    entrypoint: bash
    env:
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        workspace_env=${_NEXT_PUBLIC_WORKSPACE_ENV:-'development'}
        if [ $workspace_env = 'production' ]; then
          gcloud -q beta builds triggers run --branch=develop ui-libs-i18n-labels-stable
        fi

  - id: 'smoke-test-e2e'
    waitFor: ['deploy-cloud-run']
    allowFailure: true
    name: cypress/included:12.17.1
    entrypoint: 'bash'
    env:
      - 'CYPRESS_publicApiGateway=$_NEXT_PUBLIC_API_GATEWAY'
      - 'CYPRESS_basicAuth=$_BASIC_AUTH'
      - 'CYPRESS_basicAuthUser=$_BASIC_AUTH_USER'
      - 'CYPRESS_basicAuthPass=$_BASIC_AUTH_PASS'
      - 'CYPRESS_apiAuthUser=$_CYPRESS_API_AUTH_USER'
      - 'CYPRESS_apiAuthPass=$_CYPRESS_API_AUTH_PASS'
      - 'CYPRESS_apiUserInitials=$_CYPRESS_API_USER_INITIALS'
      - 'CYPRESS_DEFAULT_COMMAND_TIMEOUT=$_CYPRESS_DEFAULT_COMMAND_TIMEOUT'
      - 'CYPRESS_REQUEST_TIMEOUT=$_CYPRESS_REQUEST_TIMEOUT'
      - 'CYPRESS_RESPONSE_TIMEOUT=$_CYPRESS_RESPONSE_TIMEOUT'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        CYPRESS_CACHE_FOLDER=.cypress-cache yarn install --immutable
        CYPRESS_BASE_URL=`cat app_url` \
          CYPRESS_CACHE_FOLDER=.cypress-cache \
          yarn nx run fishing-map-e2e:test-pr --parallel

  - id: 'save-test-videos'
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['smoke-test-e2e']
    entrypoint: bash
    env:
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
      - '_E2E_BUCKET=$_E2E_BUCKET'
      - 'BUILD_ID=$BUILD_ID'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ -d "dist/cypress/apps/fishing-map-e2e/screenshots" ] && [ "$(ls -A dist/cypress/apps/fishing-map-e2e/screenshots)" ]; then
          gsutil cp -r dist/cypress/apps/fishing-map-e2e gs://$_E2E_BUCKET/$_NEXT_PUBLIC_WORKSPACE_ENV/$BUILD_ID
          echo "You can see the testing videos of this deploy in: "
          echo "https://console.cloud.google.com/storage/browser/$_E2E_BUCKET/$_NEXT_PUBLIC_WORKSPACE_ENV/$BUILD_ID"
          exit 1
        fi

timeout: 1800s
options:
  machineType: 'E2_HIGHCPU_8'

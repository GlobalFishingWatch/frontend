steps:
  - name: 'gcr.io/$PROJECT_ID/restore_cache'
    id: restore_cache
    waitFor: ['-']
    script: |
      #!/usr/bin/env bash
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock )

  - id: 'install-yarn'
    waitFor: ['restore_cache']
    name: node:21
    script: |
      yarn set version 4.6.0
      yarn -v
      yarn install --immutable

  - id: 'save_cache'
    waitFor: ['install-yarn']
    name: 'gcr.io/$PROJECT_ID/restore_cache'
    script: |
      #!/usr/bin/env bash
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock ) \
        --path=./node_modules \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock ) \
        --path=.yarn/cache \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock ) \
        --path=.yarn/install-state.gz \
        --no-clobber

  - id: 'build-app'
    waitFor: ['install-yarn']
    name: node:21
    entrypoint: yarn
    args: ['nx', 'build', 'fishing-map', '--parallel']
    env:
      - 'NX_BRANCH=$_NX_BRANCH'
      - 'NX_CLOUD_AUTH_TOKEN=$_NX_CLOUD_AUTH_TOKEN'
      - 'NEXT_PUBLIC_API_GATEWAY=$_NEXT_PUBLIC_API_GATEWAY'
      - 'NEXT_PUBLIC_API_VERSION=$_NEXT_PUBLIC_API_VERSION'
      - 'NEXT_PUBLIC_GOOGLE_MEASUREMENT_ID=$_NEXT_PUBLIC_GOOGLE_MEASUREMENT_ID'
      - 'NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID=$_NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID'
      - 'NEXT_PUBLIC_LATEST_CARRIER_DATASET_ID=$_NEXT_PUBLIC_LATEST_CARRIER_DATASET_ID'
      - 'NEXT_PUBLIC_USE_LOCAL_DATASETS=$_NEXT_PUBLIC_USE_LOCAL_DATASETS'
      - 'NEXT_PUBLIC_USE_LOCAL_DATAVIEWS=$_NEXT_PUBLIC_USE_LOCAL_DATAVIEWS'
      - 'NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
      - 'NEXT_PUBLIC_REPORT_DAYS_LIMIT=$_NEXT_PUBLIC_REPORT_DAYS_LIMIT'

  - name: 'gcr.io/kaniko-project/executor:debug'
    id: 'build-image'
    waitFor: ['build-app']
    entrypoint: ''
    env:
      - 'REF_NAME=$REF_NAME'
      - 'SHORT_SHA=$SHORT_SHA'
      - 'NEXT_PUBLIC_CARRIER_PORTAL_URL=$_NEXT_PUBLIC_CARRIER_PORTAL_URL'
    script: |
      image_version=`echo $REF_NAME | grep -Eo "(develop)" || echo $REF_NAME | grep -Eo "fishing-map@([0-9].*)" | grep -Eo "([0-9].*)" || echo $SHORT_SHA`
      /kaniko/executor \
        --destination=gcr.io/world-fishing-827/github.com/globalfishingwatch/fishing-map:latest \
        --destination=gcr.io/world-fishing-827/github.com/globalfishingwatch/fishing-map:$SHORT_SHA \
        --destination=gcr.io/world-fishing-827/github.com/globalfishingwatch/fishing-map:$image_version \
        --cache=true \
        --build-arg \
          APP_NAME=fishing-map \
        --target \
          production \
        -f \
          ./apps/fishing-map/Dockerfile \
        -c \
          ./dist/apps/fishing-map

  # Deploy to the appropriate environment
  - name: 'gcr.io/cloud-builders/gcloud'
    waitFor: ['build-image']
    id: 'deploy-cloud-run'
    entrypoint: 'bash'
    env:
      - '_RUN_SERVICE_NAME=$_RUN_SERVICE_NAME'
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
      - 'NEXT_PUBLIC_CARRIER_PORTAL_URL=$_NEXT_PUBLIC_CARRIER_PORTAL_URL'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        branch_service_name=`echo fishing-map-$BRANCH_NAME | sed -r 's,[/\.],-,g' | awk '{print substr(tolower($0),0,62)}'`
        service_name=${_RUN_SERVICE_NAME:-${branch_service_name}}
        gcloud beta run deploy \
          $service_name \
          --project \
          $_RUN_PROJECT \
          --image \
          gcr.io/world-fishing-827/github.com/globalfishingwatch/fishing-map:$SHORT_SHA \
          --region \
          $_RUN_REGION \
          --platform managed \
          --set-env-vars \
          BASIC_AUTH=$_BASIC_AUTH \
          --set-env-vars \
          BASIC_AUTH_USER=$_BASIC_AUTH_USER \
          --set-env-vars \
          BASIC_AUTH_PASS=$_BASIC_AUTH_PASS \
          --set-env-vars \
          NEXT_MAP_ERRORS_SPREADSHEET_ID=${_NEXT_MAP_ERRORS_SPREADSHEET_ID} \
          --set-env-vars \
          NEXT_FEEDBACK_SPREADSHEET_ID=${_NEXT_FEEDBACK_SPREADSHEET_ID} \
          --set-env-vars \
          NEXT_SPREADSHEET_CLIENT_EMAIL=${_NEXT_SPREADSHEET_CLIENT_EMAIL} \
          --set-secrets \
            NEXT_SPREADSHEET_PRIVATE_KEY=${_NEXT_SPREADSHEET_PRIVATE_KEY} \
          --allow-unauthenticated
        workspace_env=${_NEXT_PUBLIC_WORKSPACE_ENV:-'development'}
        echo "https://globalfishingwatch.org/map" > app_url
        if [ $workspace_env != 'production' ]; then
          printf %s `gcloud run services describe $service_name \
           --project $_RUN_PROJECT \
           --platform managed \
           --region $_RUN_REGION \
           --format 'value(status.url)'` > app_url
           printf %s "/map" >> app_url
        fi

  - id: 'i18n-labels publish stable'
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['deploy-cloud-run']
    entrypoint: bash
    env:
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        workspace_env=${_NEXT_PUBLIC_WORKSPACE_ENV:-'development'}
        if [ $workspace_env = 'production' ]; then
          gcloud -q beta builds triggers run --branch=develop ui-libs-i18n-labels-stable
        fi

  - id: 'smoke-test-e2e'
    waitFor: ['deploy-cloud-run']
    allowFailure: true
    name: cypress/included:13.7.3
    entrypoint: 'bash'
    env:
      - 'CYPRESS_publicApiGateway=$_NEXT_PUBLIC_API_GATEWAY'
      - 'CYPRESS_basicAuth=$_BASIC_AUTH'
      - 'CYPRESS_basicAuthUser=$_BASIC_AUTH_USER'
      - 'CYPRESS_basicAuthPass=$_BASIC_AUTH_PASS'
      - 'CYPRESS_apiAuthUser=$_CYPRESS_API_AUTH_USER'
      - 'CYPRESS_apiAuthPass=$_CYPRESS_API_AUTH_PASS'
      - 'CYPRESS_apiUserInitials=$_CYPRESS_API_USER_INITIALS'
      - 'CYPRESS_DEFAULT_COMMAND_TIMEOUT=$_CYPRESS_DEFAULT_COMMAND_TIMEOUT'
      - 'CYPRESS_REQUEST_TIMEOUT=$_CYPRESS_REQUEST_TIMEOUT'
      - 'CYPRESS_RESPONSE_TIMEOUT=$_CYPRESS_RESPONSE_TIMEOUT'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        CYPRESS_BASE_URL=`cat app_url` \
        yarn nx run fishing-map-e2e:test-pr --parallel

  - id: 'save-test-videos'
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['smoke-test-e2e']
    entrypoint: bash
    env:
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
      - '_E2E_BUCKET=$_E2E_BUCKET'
      - '_E2E_BASE_URL=$_E2E_BASE_URL'
      - 'BUILD_ID=$BUILD_ID'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ -d "dist/cypress/apps/fishing-map-e2e/screenshots" ] && [ "$(ls -A dist/cypress/apps/fishing-map-e2e/screenshots)" ]; then
          gsutil -m cp -r dist/cypress/apps/fishing-map-e2e gs://$_E2E_BUCKET/$_NEXT_PUBLIC_WORKSPACE_ENV/$BUILD_ID
          echo "You can see the testing videos of this deploy in: "
          echo "$_E2E_BASE_URL/${_E2E_BUCKET#*/}/$_NEXT_PUBLIC_WORKSPACE_ENV/$BUILD_ID"
          exit 1
        fi

  # - id: scan
  #   name: gcr.io/google.com/cloudsdktool/cloud-sdk
  #   entrypoint: /bin/bash
  #   env:
  #     - 'SHORT_SHA=$SHORT_SHA'
  #   args:
  #     - -c
  #     - |
  #       gcloud artifacts docker images scan gcr.io/world-fishing-827/github.com/globalfishingwatch/fishing-map:$SHORT_SHA \
  #       --format='value(response.scan)' --additional-package-types=GO > scan_id.txt

  # - id: severity check
  #   name: gcr.io/google.com/cloudsdktool/cloud-sdk
  #   entrypoint: /bin/bash
  #   args:
  #     - -c
  #     - |
  #       apt-get update && apt-get install -y wget &&\
  #       wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq &&\
  #       gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) > vulns.yaml && \
  #       cat vulns.yaml | yq '(.vulnerability.fixAvailable==true and (.vulnerability.effectiveSeverity== "CRITICAL" or .vulnerability.effectiveSeverity== "HIGH"))' | \
  #       if grep -Exq "true"; then echo 'Failed vulnerability check. You need to resolve the following vulnerabilities:' && cat vulns.yaml | yq '. | select(.vulnerability.fixAvailable==true and (.vulnerability.effectiveSeverity== "CRITICAL" || .vulnerability.effectiveSeverity== "HIGH" ))' && exit 1; else exit 0; fi

timeout: 1800s
options:
  machineType: 'E2_HIGHCPU_8'

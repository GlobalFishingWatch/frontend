import { Dataset } from '@globalfishingwatch/api-types'

export const datasets: Dataset[] = [
  {
    alias: ['public-global-encounters-events:latest'],
    id: 'public-global-encounters-events:v20201001',
    name: 'Encounter Events. (AIS)',
    type: 'events:v1',
    description:
      'The dataset contains encounter events for AIS. [Fishing-Carriers, Carriers-Fishing, Support-Fishing, Fishing-Support]',
    startDate: '2012-01-01T00:00:01.000Z',
    endDate: '2023-03-23T00:00:00.000Z',
    unit: 'NA',
    status: 'done',
    importLogs: null,
    category: 'event',
    subcategory: 'encounter',
    source: 'Global Fishing Watch - AIS',
    ownerId: 0,
    ownerType: 'super-user',
    configuration: {
      id: '',
      max: 0,
      min: 0,
      ttl: 0,
      band: '',
      srid: null,
      type: 'encounter',
      scale: 0,
      table: 'published_events_encounters',
      fields: null,
      format: null,
      images: null,
      offset: 0,
      source: 'bigquery',
      dataset: 'ais_global_v20201001_public_common',
      maxZoom: 12,
      project: 'gfw-research',
      filePath: null,
      function: null,
      latitude: null,
      numBytes: null,
      gcsFolder: '',
      intervals: [],
      longitude: null,
      numLayers: null,
      timestamp: null,
      translate: true,
      idProperty: '',
      emailGroups: [],
      geometryType: null,
      documentation: {
        type: 'events',
        enable: true,
        status: 'Active',
        queries: [
          'https://github.com/GlobalFishingWatch/pipe-events/blob/master/assets/bigquery/encounter-events.sql.j2',
          'https://github.com/GlobalFishingWatch/composer-dags-production/blob/main/dags/publication/ais/v20201001/events/public-encounters-compare/__init__.py#L73',
        ],
        provider: 'AIS',
      },
      geometryColumn: 'event_mean_position',
      insightSources: [],
      valueProperties: null,
      propertyToInclude: null,
      disableInteraction: false,
      apiSupportedVersions: ['v1', 'v2'],
      propertyToIncludeRange: null,
    },
    createdAt: '2023-01-16T15:58:51.622Z',
    relatedDatasets: [],
    schema: {
      flag: { type: 'string', maxLength: 3, minLength: 3 },
      // duration: { type: 'number', min: 0, max: 3000, unit: 'minutes' },
      duration: { type: 'number', min: 120, max: 4320, unit: 'minutes' },
      fields: [],
      event_id: { type: 'string', minLength: 3 },
      event_end: { type: 'string', format: 'date-time' },
      vessel_id: { type: 'string', minLength: 3 },
      event_info: {
        type: 'object',
        properties: {
          anchorage: {
            id: { type: 'string' },
            flag: { type: 'string' },
            name: { type: 'string' },
            top_destination: { type: 'string' },
          },
          anchorage_lat: { type: 'number' },
          anchorage_lon: { type: 'number' },
        },
      },
      event_type: { enum: ['port'], type: 'string', minLength: 3 },
      event_start: { type: 'string', format: 'date-time' },
      event_vessels: {
        type: 'array',
        contains: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            name: { type: 'string' },
            ssvid: { type: 'string' },
          },
        },
      },
      event_mean_position: { type: 'string' },
    },
    fieldsAllowed: ['flag', 'duration'],
    fieldsOrder: ['duration', 'flag'],
    endpoints: [
      {
        id: 'events-stats',
        description: 'Endpoint to retrieve events stats',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/events/stats',
        params: [],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'vessels',
            id: 'vessels',
            type: 'string',
            array: true,
            required: true,
          },
          {
            label: 'types',
            id: 'types',
            type: 'string',
            array: true,
            required: false,
            enum: ['encounter', 'port', 'loitering'],
          },
          {
            label: 'startDate',
            id: 'start-date',
            type: 'Date ISO',
            required: true,
          },
          {
            label: 'endDate',
            id: 'end-date',
            type: 'Date ISO',
            required: true,
          },
          {
            label: 'bounds',
            id: 'bounds',
            type: 'number',
            array: true,
          },
          {
            label: 'interval',
            id: 'interval',
            type: 'string',
            default: 'month',
          },
        ],
      },
      {
        id: 'events',
        description: 'Endpoint to retrieve a list of events information',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/events',
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'vessels',
            id: 'vessels',
            type: 'string',
            array: true,
            required: true,
          },
          {
            label: 'types',
            id: 'types',
            type: 'string',
            array: true,
            enum: ['loitering', 'encounter', 'port', 'fishing'],
          },
          {
            label: 'outputParam',
            id: 'output-param',
            type: 'string',
            default: 'json',
            enum: ['csv', 'json'],
          },
          {
            label: 'timeFormat',
            id: 'time-format',
            type: 'string',
            default: 'timestamp',
            enum: ['timestamp', 'default'],
          },
        ],
      },
      {
        id: 'events-detail',
        description: 'Endpoint to retrieve a particular event information',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/events/{{eventId}}',
        params: [{ label: 'Event id', id: 'eventId', type: 'string' }],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'outputParam',
            id: 'output-param',
            type: 'string',
            default: 'json',
            enum: ['csv', 'json'],
          },
          {
            label: 'timeFormat',
            id: 'time-format',
            type: 'string',
            default: 'timestamp',
            enum: ['timestamp', 'default'],
          },
        ],
      },
      {
        id: 'events-tiles',
        description: 'Endpoint to retrieve events tiles',
        downloadable: false,
        method: 'GET',
        pathTemplate: '/v2/events/{{eventType}}/{{z}},{{x}},{{y}}',
        params: [
          { label: 'Event type', id: 'eventType', type: 'string' },
          { label: 'Z', id: 'z', type: 'number' },
          { label: 'X', id: 'x', type: 'number' },
          { label: 'Y', id: 'y', type: 'number' },
        ],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
        ],
      },
      {
        id: 'events-cluster-tiles',
        description: 'Endpoint to retrieve events cluster tiles',
        downloadable: false,
        method: 'GET',
        pathTemplate: '/v2/cluster/events/{{z}}/{{x}}/{{y}}/tile.mvt',
        params: [
          { label: 'Z', id: 'z', type: 'number' },
          { label: 'X', id: 'x', type: 'number' },
          { label: 'Y', id: 'y', type: 'number' },
        ],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'DateRange',
            id: 'date-range',
            type: 'string',
            array: true,
            required: false,
          },
          {
            label: 'Event types',
            id: 'types',
            type: 'string',
            array: true,
            required: false,
          },
          {
            label: 'Flags',
            id: 'flag',
            type: 'string',
            array: true,
            required: false,
          },
          {
            label: 'Duration',
            id: 'duration',
            type: 'number',
            array: false,
            required: false,
          },
        ],
      },
    ],
  },
  {
    alias: null,
    id: 'public-ais-presence-viirs-match-prototype:v20220112',
    name: 'VIIRS Match',
    type: '4wings:v1',
    description:
      'The night lights vessel detections layer, known as visible infrared imaging radiometer suite or VIIRS, shows vessels at sea that satellites have detected by the light they emit at night. Though not exclusively associated with fishing vessels, this activity layer is likely to show vessels associated with activities like squid fishing, which use bright lights and fish at night.The satellite makes a single over-pass across the entire planet every night, detecting lights not obscured by clouds and designed to give at least one observation globally every day. Because the vessels are detected solely based on light emission, we can detect individual vessels and even entire fishing fleets that are not broadcasting automatic identification system (AIS) and so are not represented in the AIS apparent fishing effort layer. Lights from fixed offshore infrastructure and other non-vessel sources are excluded. Global Fishing Watch ingests boat detections processed from low light imaging data collected by the U.S. National Oceanic and Atmospheric Administration (NOAA) VIIRS. The boat detections are processed in near-real time by NOAAâ€™s Earth Observation Group, located in Boulder, Colorado. The data, known as VIIRS boat detections, picks up the presence of fishing vessels using lights to attract catch or to conduct operations at night. More than 85% of the detections are from vessels that lack AIS or Vessel Monitoring System (VMS) transponders. Due to the orbit design of polar orbiting satellites, regions closer to polar will have more over-passes per day, while equatorial regions have only one over-pass daily. Read more about this product, and download the data <a href="https://ngdc.noaa.gov/eog/viirs/download_boat.html" target="_blank" rel="noopener">here</a>.Those using night light detections data should acknowledge the South Atlantic Anomaly (SAA), an area where the Earth\'s inner Van Allen radiation belt is at its lowest altitude, allowing more energetic particles from space to penetrate. When such particles hit the sensors on a satellite, this can create a false signal which might cause the algorithm to recognize it as a boat presence. A filtration algorithm has been applied but there may still be some mis-identification. The GFW layer includes quality flags (QF), including a filter to show only detections which NOAA has classified as vessels (QF1)',
    startDate: '2017-01-01T00:00:00.000Z',
    endDate: null,
    unit: 'detections',
    status: 'done',
    importLogs: null,
    category: 'detections',
    subcategory: 'viirs',
    source: 'Global Fishing Watch',
    ownerId: 0,
    ownerType: 'super-user',
    configuration: {
      id: '',
      max: 0,
      min: 0,
      ttl: 0,
      band: '',
      srid: null,
      type: 'viirs-match',
      scale: 0,
      table: 'proto_viirs_v20220112_ais_presence_match_public',
      fields: null,
      format: null,
      images: null,
      offset: 0,
      source: 'bigquery',
      dataset: 'proto_viirs_v20220112_ais_presence_match_public',
      maxZoom: 12,
      project: 'gfw-research',
      version: 2,
      filePath: null,
      function: null,
      latitude: null,
      numBytes: null,
      gcsFolder: '',
      intervals: [],
      longitude: null,
      numLayers: null,
      timestamp: null,
      translate: true,
      idProperty: '',
      emailGroups: [],
      geometryType: null,
      documentation: {
        type: 'presence',
        enable: true,
        status: 'Active',
        queries: [
          'https://github.com/GlobalFishingWatch/composer-dags-production/blob/main/dags-prototype/viirs/presence-match-proto/__init__.py#L66',
        ],
        provider: 'VIIRS',
      },
      insightSources: [],
      valueProperties: null,
      propertyToInclude: null,
      disableInteraction: false,
      interactionColumns: [
        'vessel_id',
        'count (*) as detections',
        "string_agg(format_timestamp('%FT%TZ', timestamp)) as timestamp",
      ],
      apiSupportedVersions: ['v1', 'v2'],
      propertyToIncludeRange: null,
      interactionGroupColumns: ['vessel_id'],
    },
    createdAt: '2023-01-16T15:58:55.228Z',
    relatedDatasets: [{ id: 'public-global-all-vessels:v20201001', type: 'vessels:v1' }],
    schema: {
      cel: { type: 'number' },
      lat: { type: 'number' },
      lon: { type: 'number' },
      pos: { type: 'number' },
      flag: { type: 'string' },
      htime: { type: 'number' },
      matched: { enum: [true, false], type: 'boolean' },
      radiance: { enum: [0, 10000], type: 'range' },
      shiptype: {
        enum: ['unknown', 'fishing', 'carrier', 'support'],
        type: 'string',
      },
      detect_id: { type: 'string' },
      qf_detect: { enum: [1, 2, 3, 5, 7, 10], type: 'number' },
      timestamp: { type: 'date' },
      vessel_id: { type: 'string' },
    },
    fieldsAllowed: ['radiance', 'flag', 'matched', 'shiptype'],
    endpoints: [
      {
        id: '4wings-tiles',
        description: 'Endpoint to retrieve tiles from 4wings dataset',
        downloadable: false,
        method: 'GET',
        pathTemplate: '/v2/4wings/tile/{{type}}/{{z}}/{{x}}/{{y}}',
        params: [
          {
            label: 'Type',
            id: 'type',
            type: 'string',
            enum: ['heatmap', 'position'],
          },
          { label: 'Z', id: 'z', type: 'number' },
          { label: 'X', id: 'x', type: 'number' },
          { label: 'Y', id: 'y', type: 'number' },
        ],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: '4wings-datasets',
            required: true,
          },
          {
            label: 'filters',
            id: 'filters',
            type: 'sql',
            required: false,
          },
          {
            label: 'date-range',
            id: 'date-range',
            type: 'string',
            required: false,
            array: true,
          },
          {
            label: 'format',
            id: 'format',
            type: 'string',
            required: false,
            enum: ['intArray', 'mvt'],
          },
          {
            label: 'proxy',
            id: 'proxy',
            type: 'boolean',
            required: false,
            description: 'Server will load the request instead of redirect to avoid CORS issues',
          },
          {
            label: 'temporal-aggregation',
            id: 'temporal-aggregation',
            type: 'boolean',
            required: false,
            default: false,
          },
        ],
      },
      {
        id: '4wings-interaction',
        description: 'Endpoint to retrieve vessel ids from a 4wings cell',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/4wings/interaction/{{z}}/{{x}}/{{y}}/{{cols}}/{{rows}}',
        params: [
          { label: 'Z', id: 'z', type: 'number' },
          { label: 'X', id: 'x', type: 'number' },
          { label: 'Y', id: 'y', type: 'number' },
          { label: 'cols', id: 'cols', type: 'number' },
          { label: 'rows', id: 'rows', type: 'number' },
        ],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: '4wings-datasets',
            required: true,
          },
          {
            label: 'filters',
            id: 'filters',
            type: 'sql',
            required: false,
          },
          {
            label: 'date-range',
            id: 'date-range',
            type: 'string',
            required: false,
          },
          {
            label: 'vessel-groups',
            id: 'vessel-groups',
            type: '4wings-datasets',
            required: false,
          },
        ],
      },
      {
        id: '4wings-legend',
        description: 'Endpoint to retrieve legend statistics from 4wings dataset',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/4wings/legend',
        params: [],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: '4wings-datasets',
            required: true,
          },
          {
            label: 'filters',
            id: 'filters',
            type: 'sql',
            required: false,
          },
          {
            label: 'temporal-aggregation',
            id: 'temporal-aggregation',
            type: 'boolean',
            required: false,
            default: false,
          },
        ],
      },
      {
        id: '4wings-legend-by-zoom',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/4wings/legend/{{Z}}',
        params: [{ label: 'Z', id: 'z', type: 'number' }],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: '4wings-datasets',
            required: true,
          },
          {
            label: 'filters',
            id: 'filters',
            type: 'sql',
            required: false,
          },
          {
            label: 'temporal-aggregation',
            id: 'temporal-aggregation',
            type: 'boolean',
            required: false,
            default: false,
          },
        ],
      },
      {
        id: '4wings-bins',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/4wings/bins/{{zoom}}',
        params: [{ label: 'Zoom', id: 'zoom', type: 'number' }],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: '4wings-datasets',
            required: true,
          },
          {
            label: 'date range',
            id: 'date-range',
            type: 'string',
            required: false,
          },
          {
            label: 'Interval',
            id: 'interval',
            type: 'string',
            required: false,
          },
          {
            label: 'Num bins',
            id: 'num-bins',
            type: 'number',
            required: false,
            default: 10,
          },
          {
            label: 'filters',
            id: 'filters',
            type: 'sql',
            required: false,
          },
          {
            label: 'temporal-aggregation',
            id: 'temporal-aggregation',
            type: 'boolean',
            required: false,
            default: false,
          },
        ],
      },
      {
        id: '4wings-stats',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/4wings/stats/{{aoiId}}',
        params: [{ label: 'OAI Id', id: 'aoiId', type: 'number' }],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: '4wings-datasets',
            required: true,
          },
          {
            label: 'date range',
            id: 'date-range',
            type: 'string',
            required: false,
          },
          {
            label: 'filters',
            id: 'filters',
            type: 'sql',
            required: false,
          },
          {
            label: 'temporal-aggregation',
            id: 'temporal-aggregation',
            type: 'boolean',
            required: false,
            default: false,
          },
        ],
      },
      {
        id: '4wings-stats-create',
        downloadable: true,
        method: 'POST',
        pathTemplate: '/v2/4wings/stats',
        params: [{ label: 'OAI Id', id: 'aoiId', type: 'number' }],
        body: [
          {
            label: 'Geometry',
            id: 'geom',
            type: 'object',
            required: true,
          },
        ],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: '4wings-datasets',
            required: true,
          },
          {
            label: 'filters',
            id: 'filters',
            type: 'sql',
            required: false,
          },
          {
            label: 'temporal-aggregation',
            id: 'temporal-aggregation',
            type: 'boolean',
            required: false,
            default: false,
          },
        ],
      },
    ],
  },
]

export default datasets

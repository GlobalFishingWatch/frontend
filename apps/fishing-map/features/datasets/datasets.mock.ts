import { Dataset } from '@globalfishingwatch/api-types'

export const datasets: Dataset[] = [
  {
    alias: ['public-global-encounters-events:latest'],
    id: 'public-global-encounters-events:v20201001',
    name: 'Encounter Events. (AIS)',
    type: 'events:v1',
    description:
      'The dataset contains encounter events for AIS. [Fishing-Carriers, Carriers-Fishing, Support-Fishing, Fishing-Support]',
    startDate: '2012-01-01T00:00:01.000Z',
    endDate: '2023-03-23T00:00:00.000Z',
    unit: 'NA',
    status: 'done',
    importLogs: null,
    category: 'event',
    subcategory: 'encounter',
    source: 'Global Fishing Watch - AIS',
    ownerId: 0,
    ownerType: 'super-user',
    configuration: {
      id: '',
      max: 0,
      min: 0,
      ttl: 0,
      band: '',
      srid: null,
      type: 'encounter',
      scale: 0,
      table: 'published_events_encounters',
      fields: null,
      format: null,
      images: null,
      offset: 0,
      source: 'bigquery',
      dataset: 'ais_global_v20201001_public_common',
      maxZoom: 12,
      project: 'gfw-research',
      filePath: null,
      function: null,
      latitude: null,
      numBytes: null,
      gcsFolder: '',
      intervals: [],
      longitude: null,
      numLayers: null,
      timestamp: null,
      translate: true,
      idProperty: '',
      emailGroups: [],
      geometryType: null,
      documentation: {
        type: 'events',
        enable: true,
        status: 'Active',
        queries: [
          'https://github.com/GlobalFishingWatch/pipe-events/blob/master/assets/bigquery/encounter-events.sql.j2',
          'https://github.com/GlobalFishingWatch/composer-dags-production/blob/main/dags/publication/ais/v20201001/events/public-encounters-compare/__init__.py#L73',
        ],
        provider: 'AIS',
      },
      geometryColumn: 'event_mean_position',
      insightSources: [],
      valueProperties: null,
      propertyToInclude: null,
      disableInteraction: false,
      apiSupportedVersions: ['v1', 'v2'],
      propertyToIncludeRange: null,
    },
    createdAt: '2023-01-16T15:58:51.622Z',
    relatedDatasets: [],
    schema: {
      flag: { type: 'string', maxLength: 3, minLength: 3 },
      // duration: { type: 'number', min: 0, max: 3000, unit: 'minutes' },
      duration: { type: 'number-single', min: 120, max: 4320, unit: 'minutes' },
      fields: [],
      event_id: { type: 'string', minLength: 3 },
      event_end: { type: 'string', format: 'date-time' },
      vessel_id: { type: 'string', minLength: 3 },
      event_info: {
        type: 'object',
        properties: {
          anchorage: {
            id: { type: 'string' },
            flag: { type: 'string' },
            name: { type: 'string' },
            top_destination: { type: 'string' },
          },
          anchorage_lat: { type: 'number' },
          anchorage_lon: { type: 'number' },
        },
      },
      event_type: { enum: ['port'], type: 'string', minLength: 3 },
      event_start: { type: 'string', format: 'date-time' },
      event_vessels: {
        type: 'array',
        contains: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            name: { type: 'string' },
            ssvid: { type: 'string' },
          },
        },
      },
      event_mean_position: { type: 'string' },
    },
    fieldsAllowed: ['flag', 'duration'],
    fieldsOrder: ['duration', 'flag'],
    endpoints: [
      {
        id: 'events-stats',
        description: 'Endpoint to retrieve events stats',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/events/stats',
        params: [],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'vessels',
            id: 'vessels',
            type: 'string',
            array: true,
            required: true,
          },
          {
            label: 'types',
            id: 'types',
            type: 'string',
            array: true,
            required: false,
            enum: ['encounter', 'port', 'loitering'],
          },
          {
            label: 'startDate',
            id: 'start-date',
            type: 'Date ISO',
            required: true,
          },
          {
            label: 'endDate',
            id: 'end-date',
            type: 'Date ISO',
            required: true,
          },
          {
            label: 'bounds',
            id: 'bounds',
            type: 'number',
            array: true,
          },
          {
            label: 'interval',
            id: 'interval',
            type: 'string',
            default: 'month',
          },
        ],
      },
      {
        id: 'events',
        description: 'Endpoint to retrieve a list of events information',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/events',
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'vessels',
            id: 'vessels',
            type: 'string',
            array: true,
            required: true,
          },
          {
            label: 'types',
            id: 'types',
            type: 'string',
            array: true,
            enum: ['loitering', 'encounter', 'port', 'fishing'],
          },
          {
            label: 'outputParam',
            id: 'output-param',
            type: 'string',
            default: 'json',
            enum: ['csv', 'json'],
          },
          {
            label: 'timeFormat',
            id: 'time-format',
            type: 'string',
            default: 'timestamp',
            enum: ['timestamp', 'default'],
          },
        ],
      },
      {
        id: 'events-detail',
        description: 'Endpoint to retrieve a particular event information',
        downloadable: true,
        method: 'GET',
        pathTemplate: '/v2/events/{{eventId}}',
        params: [{ label: 'Event id', id: 'eventId', type: 'string' }],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'outputParam',
            id: 'output-param',
            type: 'string',
            default: 'json',
            enum: ['csv', 'json'],
          },
          {
            label: 'timeFormat',
            id: 'time-format',
            type: 'string',
            default: 'timestamp',
            enum: ['timestamp', 'default'],
          },
        ],
      },
      {
        id: 'events-tiles',
        description: 'Endpoint to retrieve events tiles',
        downloadable: false,
        method: 'GET',
        pathTemplate: '/v2/events/{{eventType}}/{{z}},{{x}},{{y}}',
        params: [
          { label: 'Event type', id: 'eventType', type: 'string' },
          { label: 'Z', id: 'z', type: 'number' },
          { label: 'X', id: 'x', type: 'number' },
          { label: 'Y', id: 'y', type: 'number' },
        ],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
        ],
      },
      {
        id: 'events-cluster-tiles',
        description: 'Endpoint to retrieve events cluster tiles',
        downloadable: false,
        method: 'GET',
        pathTemplate: '/v2/cluster/events/{{z}}/{{x}}/{{y}}/tile.mvt',
        params: [
          { label: 'Z', id: 'z', type: 'number' },
          { label: 'X', id: 'x', type: 'number' },
          { label: 'Y', id: 'y', type: 'number' },
        ],
        query: [
          {
            label: 'datasets',
            id: 'datasets',
            type: 'string',
            required: true,
          },
          {
            label: 'DateRange',
            id: 'date-range',
            type: 'string',
            array: true,
            required: false,
          },
          {
            label: 'Event types',
            id: 'types',
            type: 'string',
            array: true,
            required: false,
          },
          {
            label: 'Flags',
            id: 'flag',
            type: 'string',
            array: true,
            required: false,
          },
          {
            label: 'Duration',
            id: 'duration',
            type: 'number',
            array: false,
            required: false,
          },
        ],
      },
    ],
  },
]

export default datasets

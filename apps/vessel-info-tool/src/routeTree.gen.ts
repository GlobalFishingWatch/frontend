/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'
import { ServerRoute as ApiVesselsFileNameServerRouteImport } from './routes/api/vessels/$fileName'
import { ServerRoute as ApiIccatSourceServerRouteImport } from './routes/api/iccat/$source'

const rootServerRouteImport = createServerRootRoute()

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const ApiVesselsFileNameServerRoute =
  ApiVesselsFileNameServerRouteImport.update({
    id: '/api/vessels/$fileName',
    path: '/api/vessels/$fileName',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiIccatSourceServerRoute = ApiIccatSourceServerRouteImport.update({
  id: '/api/iccat/$source',
  path: '/api/iccat/$source',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof AuthIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof AuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/': typeof AuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/'
  id: '__root__' | '/_auth' | '/_auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/iccat/$source': typeof ApiIccatSourceServerRoute
  '/api/vessels/$fileName': typeof ApiVesselsFileNameServerRoute
}
export interface FileServerRoutesByTo {
  '/api/iccat/$source': typeof ApiIccatSourceServerRoute
  '/api/vessels/$fileName': typeof ApiVesselsFileNameServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/iccat/$source': typeof ApiIccatSourceServerRoute
  '/api/vessels/$fileName': typeof ApiVesselsFileNameServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/iccat/$source' | '/api/vessels/$fileName'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/iccat/$source' | '/api/vessels/$fileName'
  id: '__root__' | '/api/iccat/$source' | '/api/vessels/$fileName'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiIccatSourceServerRoute: typeof ApiIccatSourceServerRoute
  ApiVesselsFileNameServerRoute: typeof ApiVesselsFileNameServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/vessels/$fileName': {
      id: '/api/vessels/$fileName'
      path: '/api/vessels/$fileName'
      fullPath: '/api/vessels/$fileName'
      preLoaderRoute: typeof ApiVesselsFileNameServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/iccat/$source': {
      id: '/api/iccat/$source'
      path: '/api/iccat/$source'
      fullPath: '/api/iccat/$source'
      preLoaderRoute: typeof ApiIccatSourceServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiIccatSourceServerRoute: ApiIccatSourceServerRoute,
  ApiVesselsFileNameServerRoute: ApiVesselsFileNameServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()

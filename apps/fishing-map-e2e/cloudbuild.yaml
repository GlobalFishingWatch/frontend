steps:
  - name: gcr.io/cloud-builders/git
    args: [fetch, --depth=1000]
  - id: 'switch_tag'
    waitFor: ['-']
    name: node:21
    env:
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
    script: |
      if [ $_NEXT_PUBLIC_WORKSPACE_ENV = "production" ]; then
          tag=$(git describe --match "@gfw/fishing-map*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
          git checkout $tag
      fi

  - name: 'gcr.io/$PROJECT_ID/restore_cache'
    id: restore_cache
    waitFor: ['switch_tag']
    script: |
      #!/usr/bin/env bash
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=cypress-cache-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock )

  - id: 'install-yarn'
    waitFor: ['restore_cache']
    name: node:21
    script: |
      yarn set version 4.6.0
      yarn -v
      yarn install --immutable

  - id: 'save_cache'
    waitFor: ['install-yarn']
    name: 'gcr.io/$PROJECT_ID/restore_cache'
    script: |
      #!/usr/bin/env bash
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock ) \
        --path=./node_modules \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=cypress-cache-$( checksum yarn.lock ) \
        --path=/builder/home/.cache \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock ) \
        --path=.yarn/cache \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock ) \
        --path=.yarn/install-state.gz \
        --no-clobber

  - id: 'smoke-test-e2e-live'
    name: cypress/included:13.7.3
    waitFor: ['install-yarn']
    allowFailure: true
    entrypoint: 'bash'
    env:
      - 'CYPRESS_CACHE_FOLDER=/builder/home/.cache/Cypress'
      - 'CYPRESS_publicApiGateway=$_NEXT_PUBLIC_API_GATEWAY'
      - 'CYPRESS_basicAuth=$_BASIC_AUTH'
      - 'CYPRESS_basicAuthUser=$_BASIC_AUTH_USER'
      - 'CYPRESS_basicAuthPass=$_BASIC_AUTH_PASS'
      - 'CYPRESS_apiAuthUser=$_CYPRESS_API_AUTH_USER'
      - 'CYPRESS_apiAuthPass=$_CYPRESS_API_AUTH_PASS'
      - 'CYPRESS_apiUserInitials=$_CYPRESS_API_USER_INITIALS'
      - 'CYPRESS_BASE_URL=$_CYPRESS_BASE_URL'
      - 'CYPRESS_DEFAULT_COMMAND_TIMEOUT=$_CYPRESS_DEFAULT_COMMAND_TIMEOUT'
      - 'CYPRESS_REQUEST_TIMEOUT=$_CYPRESS_REQUEST_TIMEOUT'
      - 'CYPRESS_RESPONSE_TIMEOUT=$_CYPRESS_RESPONSE_TIMEOUT'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        yarn nx run fishing-map-e2e:test-env --parallel

  - id: 'save-test-videos'
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['smoke-test-e2e-live']
    entrypoint: bash
    env:
      - '_NEXT_PUBLIC_WORKSPACE_ENV=$_NEXT_PUBLIC_WORKSPACE_ENV'
      - '_E2E_BUCKET=$_E2E_BUCKET'
      - '_E2E_BASE_URL=$_E2E_BASE_URL'
      - 'BUILD_ID=$BUILD_ID'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ -d "dist/cypress/apps/fishing-map-e2e/screenshots" ] && [ "$(ls -A dist/cypress/apps/fishing-map-e2e/screenshots)" ]; then
          gsutil -m cp -r dist/cypress/apps/fishing-map-e2e gs://$_E2E_BUCKET/$_NEXT_PUBLIC_WORKSPACE_ENV/$BUILD_ID
          echo "You can see the testing videos of this deploy in: "
          echo "$_E2E_BASE_URL/${_E2E_BUCKET#*/}/$_NEXT_PUBLIC_WORKSPACE_ENV/$BUILD_ID"
          exit 1
        fi

timeout: 1800s
options:
  machineType: 'E2_HIGHCPU_8'

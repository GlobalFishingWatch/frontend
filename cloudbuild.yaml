steps:
  - name: gcr.io/cloud-builders/git
    args: ['fetch', '--unshallow', '--no-tags']

  - name: 'gcr.io/$PROJECT_ID/restore_cache'
    id: restore_cache
    waitFor: ['-']
    script: |
      #!/usr/bin/env bash
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=cypress-cache-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock )

  - id: 'install-yarn'
    waitFor: ['restore_cache']
    name: node:21
    script: |
      yarn set version 4.6.0
      yarn -v
      yarn install --immutable

  - id: 'save_cache'
    waitFor: ['install-yarn']
    name: 'gcr.io/$PROJECT_ID/restore_cache'
    script: |
      #!/usr/bin/env bash
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock ) \
        --path=./node_modules \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=cypress-cache-$( checksum yarn.lock ) \
        --path=/builder/home/.cache \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock ) \
        --path=.yarn/cache \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock ) \
        --path=.yarn/install-state.gz \
        --no-clobber

  - id: get-affected
    name: 'node:21'
    entrypoint: yarn
    args: ['affected']

  # Trigger the affected apps builds
  - name: gcr.io/cloud-builders/gcloud
    waitFor: ['get-affected']
    id: deploy-cloud-run
    entrypoint: bash
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        AFFECTED_APPS=(`cat affected-apps.txt`)
        echo "Going to trigger builds for the following apps:"
        printf '%s\n' "${AFFECTED_APPS[@]//,/}"
        FAILED_APPS=()
        for i in ${AFFECTED_APPS[@]//,/}; do
          if [ ! -z "$i" ]; then
            if gcloud -q beta builds triggers run --branch=develop ui-${i}-develop 2>/dev/null; then
              echo "✅ Successfully triggered build for ui-${i}-develop"
            else
              echo "❌ Failed to trigger build for ui-${i}-develop (trigger might not exist)"
              FAILED_APPS+=("$i")
            fi
          fi
        done

        if [ ${#FAILED_APPS[@]} -ne 0 ]; then
          exit 1
        fi

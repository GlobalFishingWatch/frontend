steps:
  - name: gcr.io/cloud-builders/git
    args: ['fetch', '--unshallow', '--no-tags']

  - name: 'gcr.io/$PROJECT_ID/restore_cache'
    id: restore_cache
    waitFor: ['-']
    script: |
      #!/usr/bin/env bash
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock )
      restore_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock )

  - id: 'install-yarn'
    waitFor: ['restore_cache']
    name: node:21
    script: |
      yarn set version 4.4.0
      yarn -v
      yarn install --immutable

  - id: 'save_cache'
    waitFor: ['install-yarn']
    name: 'gcr.io/$PROJECT_ID/restore_cache'
    script: |
      #!/usr/bin/env bash
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=node_modules-$( checksum yarn.lock ) \
        --path=./node_modules \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-$( checksum yarn.lock ) \
        --path=.yarn/cache \
        --no-clobber
      save_cache \
        --bucket=gs://frontend-cache-dependencies \
        --key=yarn-install-state-$( checksum yarn.lock ) \
        --path=.yarn/install-state.gz \
        --no-clobber

  - id: get-affected
    name: 'node:21'
    entrypoint: yarn
    args: ['affected']

  # Trigger the affected apps builds
  - name: gcr.io/cloud-builders/gcloud
    waitFor: ['get-affected']
    id: deploy-cloud-run
    entrypoint: bash
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        AFFECTED_APPS=(`cat affected-apps.txt`)
        echo `cat affected-apps.txt`
        for i in ${AFFECTED_APPS[@]//,/}; do
          [ ! -z "$i" ] && gcloud -q beta builds triggers run --branch=develop ui-${i}-develop
        done

  - id: scan
      name: gcr.io/google.com/cloudsdktool/cloud-sdk
      entrypoint: /bin/bash
      args:
        - -c
        - |
          gcloud artifacts docker images scan <image> \
          --format='value(response.scan)' --additional-package-types=GO > scan_id.txt
    - id: severity check
      name: gcr.io/google.com/cloudsdktool/cloud-sdk
      entrypoint: /bin/bash
      args:
        - -c
        - |
          apt-get update && apt-get install -y wget &&\
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq &&\
          gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) > vulns.yaml && \
          cat vulns.yaml | yq '(.vulnerability.fixAvailable==true and (.vulnerability.effectiveSeverity== "CRITICAL" or .vulnerability.effectiveSeverity== "HIGH"))' | \
          if grep -Exq "true"; then echo 'Failed vulnerability check. You need to resolve the following vulnerabilities:' && cat vulns.yaml | yq '. | select(.vulnerability.fixAvailable==true and (.vulnerability.effectiveSeverity== "CRITICAL" || .vulnerability.effectiveSeverity== "HIGH" ))' && exit 1; else exit 0; fi

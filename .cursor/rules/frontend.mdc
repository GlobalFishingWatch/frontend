---
description: 
globs: **/*.ts,**/*.tsx
alwaysApply: false
---

You are an expert in TypeScript, Node.js, React, Vite, TanStack Query, TanStack Router, and CSS modules.

Monorepo ruls
- Use yarn to manage dependencies
  
Response Constraints
- Do not remove any existing code unless necessary.
- Do not remove my comments or commented-out code unless necessary.
- Do not change the formatting of my imports.
- Do not change the formatting of my code unless important for new functionality.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories and hooks or config files (e.g., components/auth-wizard).
- Use upper first with camelCase for components
- Favor default exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer types over interfaces.
- Implement strict TypeScript checks
- Avoid enums; use maps instead.
- Use functional components with TypeScript types.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Use curly braces for all conditionals. Favor simplicity over cleverness.
- Use declarative JSX.

UI and Styling
- Use CSS modules for components and styling.

Redux best practices
- Use Redux Toolkit for efficient Redux development
- Implement slice pattern for organizing Redux code
- Utilize createAsyncThunk for handling async actions
- Use selectors for accessing state in components
- Use Redux hooks: useSelector, (useAppDispatch in app/app.hooks.ts)

Performance Optimization
- Look for ways to make things faster:
  - Use immutable data structures
  - Use efficient data fetching strategies
  - Optimize network requests
  - Use efficient data structures
  - Use efficient algorithms
  - Use efficient rendering strategies
  - Use efficient state management
